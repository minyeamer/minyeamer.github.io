<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Divide and Conquer on Minystory</title>
    <link>https://minyeamer.github.io/tags/divide-and-conquer/</link>
    <description>Recent content in Divide and Conquer on Minystory</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 22 Aug 2022 10:24:00 +0900</lastBuildDate><atom:link href="https://minyeamer.github.io/tags/divide-and-conquer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[백준 1780] 종이의 개수 (Python)</title>
      <link>https://minyeamer.github.io/blog/boj-problems-1780/</link>
      <pubDate>Mon, 22 Aug 2022 10:24:00 +0900</pubDate>
      
      <guid>https://minyeamer.github.io/blog/boj-problems-1780/</guid>
      <description>문제 링크 https://www.acmicpc.net/problem/1780 문제 해설 Idea Divide and Conquer 2차원 배열의 요소를 완전탐색하면서 동일한 값으로 구성되지 않을 경우,
행렬을 9등분하여 재귀적 호출 수행 처음 시도에서는 행렬을 매번 슬라이싱하면서 전달하여 시간 초과가 발생 행렬의 시작 인덱스 번호를 전달하고 길이만큼 참조하는 방식으로 시간 복잡도 개선 Data Size N: 1 &amp;lt;= int &amp;lt;= 3^7 해설 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import sys input = sys.</description>
    </item>
    
    <item>
      <title>[프로그래머스 68936] 쿼드압축 후 개수 세기 (Python)</title>
      <link>https://minyeamer.github.io/blog/programmers-problems-68936/</link>
      <pubDate>Wed, 17 Aug 2022 11:04:00 +0900</pubDate>
      
      <guid>https://minyeamer.github.io/blog/programmers-problems-68936/</guid>
      <description>문제 링크 https://school.programmers.co.kr/learn/courses/30/lessons/68936 문제 해설 Idea Divide and Conquer 2차원 배열을 4등분씩 나눠 재귀함수를 호출하고 동일한 값으로 채워져 있는지 판단하여 값의 개수 증가 2^n 형태의 정수에 대해 NumPy를 활용해 행렬 인덱싱을 간단히 구현 Time Complexity O(N^2 Log N^2) = 20,000,000 Data Size arr: [[int(1)]], shape(2^n, 2^n) 1 &amp;lt;= 2^n &amp;lt;= 1024 해설 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import numpy as np def quad_comp(n, arr, answer): values = np.</description>
    </item>
    
  </channel>
</rss>
